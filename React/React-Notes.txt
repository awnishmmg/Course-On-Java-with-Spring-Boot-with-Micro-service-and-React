We have to start our session in React JS:-
React :- it is stack of MERN 

M : mongodb 
E : Express JS 
R : React Js 
N : Node Js 

1. All these are Technology of Javascript.
2. Pre-requistic you must little bit javascript.
3. html and css is Must.

in Javascript :-
1. Basic 
	1. loops,decision loops, let const,var 
	2. functions, arrow functions, Events
	3. dom manupulations 
	3. callback, Higher order functions,Anonymous functions 
	4. local storage, scope resolutions 
	5. promises, async,await and fetch api.
	
	1. https://developer.mozilla.org/en-US/docs/Web/JavaScript (Best| Time constraint)
	2. https://javascript.info (straight to the point)
	

React JS : Multiple Tech stack.
React JS : Front end Framework (Js library facebook(Meta))

Backend : Python + Django/Fask 
Front End : React Js 

Java : Backend(java with Spring Boot,Microservice Rest Api)
Front End : React Js 

Framework other then React Js :-
===============================
Angular/React/Vuejs/Svelet Js/Alpine JS/Angular Js.

Important React about React:-
1. React is front end framework (library.)
2. SPA based Application (SPA : Single Page Application)
   Eg : MPA : multi page applicaiton 
   
   Multiple pages -> single index.html -> React use for its internal purpose.
   
   in case java with jsp:-
   About.jsp 
   gallery.jsp 
   contact.jsp
   home.jsp
   
   Application heavy -> front Architecture : MPA Based (Multi page application)
   Multiple Pages/ Load Time/Performance effect.
   
   In React we have single index.html 
   All the Views as written as logic in form class or functions.
   -About.js -> class or functions
   -gallery.js -> class or functions
   -contact.js -> class or functions
   -home.js  -> class or functions
    
	The Application Logic which you write in Js in form class and functions 
	is only component.
	
	consider we want make a website 
	1. gallery.html
	2. home.html
    3. About.html
	4. contact.html
	5. service.html
	
	The core of the React is component based Architecture.
	Now since there no page, hence memory will also will not be consumed.
	
3. React works on the basis of 2 concepts.
   1. JSX 
   2. Virtual DOM.
   
  what is JSX ?
  Jsx : Javascript + XML  = React Code 
  XML : Extensible Markup langauge somehting like html.
  
  html works in readymade tags 
  xml works on the basis custom or user defined.
  
  DOM :- 
  Javascript object based : Ready Made Object
  Java object oriented : Custom Object.
  
  Javascript (Vanilla Js):-
  ============================
  2 main Object 
  1. BOM : Browser Object Model 
		 window.alert()
		 window.confirm()
		 window.prompt()
		 ...
		 ...
  2. DOM : Document Object Model 
		1. Tags,forms Elements,urls...
		
		<!doctype html>
		<html>
			<head>
			</head>
			<body>
				<h1> Hello world</html>
			</body>
		</html>
      All the Tags are recognised by the,Browser.
      -Browser can be firebox,chrome,(Safari,MS Edge),Opera,Brave
	  All these tags are real tags and indetified by browser.
	  browser will occupy memory as well.
	  
	  React -> Js but also we can xml (<AWNISH></AWNISH>)
	  Awnish Tag : it is not real Tag.
	  it will create a virtual DOM 
	  and will not occupy any memory.
	  
	  
			Browser 
			  |
		Window Object 
	          |
          Document 
             |
            html
       --------------
       |             |
     Head	        body	
   
	window.oncontextmenu = function(){
       return false;
    }
	
	concept of virtual DOM:-
	======================
	I dont know React How can I implement My Virtual Dom in Javascript?
	
	
	https://www.youtube.com/watch?v=jwOW-qlJtxg&list=PLsyeobzWxl7rrvgG7MLNIMSTzVCDZZcT4&index=25
	https://www.youtube.com/playlist?list=PLsyeobzWxl7qtP8Lo9TReqUMkiOp446cV
	
	How to work with React:-
    =========================
	1. to work with React your system must have Node Installed.
	2. Front end what Node Js has to with React.
	
	M : mongodb  =>database => javascript
	E : Express JS => Backend => Framework => JavaScript
	R : React Js => JavaScript => frontend Framework.
	N : Node Js => Javascript Runtime Environment 
				   Node Js is called as server side runtime environment.
				   you can execute the code of javascript without browser.
				   
				   

	 Full Stack developmenet (using Javasctipt Technology) = Front end (JS) + Backend (Js)
	 Backend = Server Side Environment + Database 
			   (Node Js)				(Mongodb)
			   
	 before 2008'v javascript used to be in Browser but now,
	using node js you run javascript code outside browser.
	
	https://nodejs.org/en
	1. LTS : Long term support -> stable version
	2. current version : latest version
	
	1. How to check if node is install or not 
	node --version 
	
	2. node comes with anothe tool which is called npm : node package manager
	npm --version
	
	what is importance of npm:-
   ================================
   if you want donwload the package or some library or framework
   we will npm 
   
   commands :-
   npm install express 
   npm install mongoose 
   npm install react-dom 
   npm install choclaty
   
   npm uninstall express 
   npm uninstall mongoose 
   npm uninstall react-dom 
   npm uninstall choclaty
	
	install is of 2 types 
	1. local installation 
		1- it a project speicific.
		node packages 
	2, global installation 
		once install need to not require another.
		
		when ever you install a package a speicial folder called node_modules are generated.
		node_modules : All the liquired tools and library and functions, using 
		which you can build any application, react, node ,express...
		
		
	  react is a front end what relation it has with node js.
	  1. react library donwload using npm 
	  2. react is build upon node js code base.
	  
	  node js -> server side environment -> server -> on the top of server we have built react.
	  
	  
	  Building
		 |
	  pillars 
	  
	  
	  Front App (SPA)
			|
		   React
	        |
		Server of Node (server.js)
		    |
		Node Runtime Environment
		1. node.exe itself 
		2. npm.exe package manager => package install/uninstall
		
	  
	  How to create our server using Node Js:-
	  ========================================
	  1. npm init -y 
			package.json
	  2. npm run start : node server.js 
	  
	  
	 steps:-
	 How to set up complete frontend application using, Node Js :-
	 ===============================================================
	M : mongodb : database
	E : Express JS : backend framework of node js 
	R : React Js : front end framework
	N : Node Js : server side runtime environment.

	Q1: How many ways can you reach lucknow to delhi
	1. via Barelly (8 to 9 hours)
	2. via Etewah (8 to 9 hours)
	3. via Agra-yamuna Express (6 hours.)
	
	Express way : Express way 
	Journey : shorted time cover 
	1. no speed breaker.
	2. 5 to 6 hours you will be here.
	
	we can create server using node js 
	but we write lot of code and take of time.
	we need some way,
	hence Express package is like express highway
	to write Backend application in Node Js less line of 
	code and super fast  and in very less time.
	
	
	steps :-
	1. intialise the project or node app 
	  at root folder -> server.js 
	  cmd:/> npm init -y 
	  
	2. install express package 
	   npm cache clean --force
	   npm install express 	
	
	
    3. After you install your express 3 main changes are done 
	1. node_modules : main folder where all requires packages is installed.
						|
						express 
		How to verify express install:-
		cmd:/> npm ls express 
		-- express@5.1.0
	2. package.json 
			{
			dependencies : {
				express : 5.1.0
				}
			}
		
	3. package.lock.json 
	
	what is difference b/w package.json and package.lock.json 
	package.json : version : modify 
	in order keep version of application stabled we need package.lock.json 
	
	tommorrow express version can change or not.
	npm install express => latest @9.x 
	Todays date what is version : 5.x 
	
	Application -> 5.x 
	express ->9.x 
	my code will give error.
	
	there should some way so that we can keep application 
	version stable.
	so we lock the version of packages(dependencies)
	package.lock.json 
	
	
	App /static -> Part
		1. public : index.html 
		2. src : components.
		
	frontend 
		1. static application 
		2. dynamic applications.
		
	-client side rendering :- 
		front end view render/generate
	-server side rendering :-
		server side view render/generate
		
		
	Advantage :-
	1. No reloading
	2. Fast Executing
	3. virtual dom 
	4. less memory required, light wieght
	
	Biggest dis-advantage of React is :-
	1. its not SEO Friendly.
	
	
	How to SEO Works:-
	1. SEO : Search Engine Optimisation 
	   SEO  : it indexes all the website in order of there popularity 
	   and search result.
	   
	   
	Search Engine ---> Google ----> Algorithm ---> Web Crawling Algorithm.
	Meta Tags 
	Paragraphs 
	Heading
	
	site content Read 
	<p> Softpro Learning Center </p>
	Paragraph : Real Dom
    
	Web Crawler ---------> Tag 
	React ---> Virtual Dom ---> Page Tags Render 
	Google Search Engine will be able crawl or no.
	
	React -> client side 
	Page About.html -----> Server 
	
	Google Web Crawler (server) --------Request (About Us)--------> Softpro India 
								       React  (404)
							Request wont be send Server 
									   
     React dynamically loads entire content of website 
	 in single web page and it helps user, to navigate 
	 in different pages without Internet connnection 
	 This is only possible because client rendering.
	 
	React : client side rendering.
	SEO : server side rendering 
	React -> Next Js -> SEO Friendly.
	
	The SPA Application we build using Node is good 
	but it requires lot of code write.
	so why use ready code base library : react.
	
	
	1. in order to install react you need a utility tools 
	npx : node package executable 
	npm : node package manager.
	
	
	Two flavour :-
	1. Full stack Flavour:-
		Entire front and backend you can integrate 
		https://18.react.dev/learn
		1. remix framework
		2. refine framework
		3. next framework
		4. Gatsby framework

		
		react 19.v:-
		TanStack Start (Beta)
		RedwoodJS:
		
	2. stand alone Flavour:- (React Powered No Framework)
		1. create-react-app : it is utility tools 
							  using which you create react application
							  
		   npm install create-react-app --global 
		   why we are installing globally 
		   so that wheever i want i can create react app.
		   
		   
		   npm install create-react-app --global
		   npm ls create-react-app
		   where create-react-app
		   
		   C:\Program Files\nodejs\create-react-app
		   C:\Program Files\nodejs\create-react-app.cmd <-----utility software
		   it is type executable.
		   
		   npx create-react-app <app-name>
		   eg:-
		   npx create-react-app ecommerce 
		   npx create-react-app college-erp
		   npx create-react-app flipkart
		   
		   check your app folder created or not:-
		   =========================================
		   cmd:/> dir 
		   cmd:/> cd app1
		   cmd:/> type package.json
		   D:\Training\spi\Java-Technology\React\react-apps\app1>
		   
		   React Project Structure:-
		   1. public 
				1. manifest.json 
				2. icon
				3. index.html
		   2. src 
				|
				1. App.jsx  | App.js
				2. App.test.jsx | App.test.js 
				3. index.js 
		   3. package.json 
		   4. node_module
		   5. package.lock.json 
		   
		  command line file read :-
		  cmd:/> type package.json
		  
		  or 
		  open in notepad++ or notepad  or vscode
		  
		 importance of script key in package.json:-
		 =========================================
		 scripts key is used to :- 
		 To Add you commands.
		 
		 {
			"katreena":"echo katreena awnish gf"
		 }
		 
		 How to run command in scripts:-
		 cmd:/> npm run katreena
				npm run <command-name>
				
		Now open code in vs code :-
		Note : make sure you are inside app1 folder
		cmd:/> code .
		
		How to run the Application of react :-
		=======================================
		open the package.json have a look once on scripts key.
		
		
	"scripts": {
    "start": "react-scripts start",  --> start the application on dev
    "build": "react-scripts build",  --> make the production build
    "test": "react-scripts test",  --> run the test case.
    },
	
	In Industry we have 3 environment
	1. production  : Live Application (Live User) (Bug free or min bug (stable version))
		you cannot run your application like this you have build.
		build : stable
		npm  build 
		or 
		npm run build
			In order to make build you need to tools 
			
			1. webpack : build or bundler
			2. vite : build or bundler
			3. parcel : build or bunder.
			
	2. dev : developer (Bugs)
		npm start
		or 
		npm run start
	3. test or stage : test is environment where test your application.
		QA (Quality Analyst)
		npm test 
		or
		npm run test 
		
	

	There are 2 responsive framework
	1. Boostrap CSS
	2. tailwind CSS
	3. materlize CSS
	
	
	concept of react :-
	1. one of the power ful feature about react is :-
	hot realoading.
	
	Do you remeber in Node Js application we need restar our server.
	for every change.
	we are building large application for every change we need to restart 
	
	Yes or no.
	we are one color,one css, one line , one heading , one paragraph 
	every time we need to restart. 
	
	React people resolved this problem concept called : hot reloading.
	Auto-reload the Page as soon code change.
	
	React Architecture:-
	=======================
			
		   React
			|
		   express
			|
		Node Server
			|
	Node Runtime Environment
	
	
	Internal Architecture of React:-
	=================================
			React
	|----------------------------------|
		  index.html
			|
		  Real Dom
		  <div id="root">
			<React App> (App.jsx or App.js)
		  </div>
	  who power react application 
	      virtual Dom (react-dom)	
			 |
		  src/main.js(index.js) (document.getElementId('root'))
	|------------------------------------|	   
			|
		  express
			|
		Node Server
			|
	Node Runtime Environment
	
	
	main.js is real file which interacting with 
	real DOM and Virtual DOM
	
	React Folder strucure meaning :-
	public : static files 
	
	But our Entire react application static application.
	there is some difference in meaning of public 
	and src.
	
	Rule:-
	React Actual code is inside src folder.
	src (source code): logic and design part, js,css,images,component.scope
	public folder: untouched.
	
	where is actual location main.js 
    inside src:-
	
	step1 : make src folder and create index.js file.
		src/index.js 
		
	
How to Run existing Project:-
================================
1. Make sure you have installed.
2. git clone https://github.com/awnishmmg/Course-On-Java-with-Spring-Boot-with-Micro-service-and-React.git
3. cd app1
4. type package.json 
5. npm install 
6. npm run start

How to push:-
============
1. Login to your git Hub.
2. get the class token from developer section.



in order push or pull we need url:-
=================================
if you are the owner : you will be creating the url, if you are not owner you will 
not the creating the url. you will be provided with git url or access.


what is .gitignore file:-
The file which add in .gitignore will not be pushed in repo.
eg: we have public repo and we have database credentials config.js 

config.js
node_module
logs
.env

Tokenised URL:- : Push or Pull or fetch or contribute
https://username:<token>@github.com/normal-url

origin = https://awnishmmg:<token>@github.com/awnishmmg/react-spa-spring-boot.git

origin : just a variable name which url path.

Normal URL:- https://github.com/awnishmmg/react-spa-spring-boot.git (clone|pull|fetch) donwload

How to find the owner name in existing repo:-
============================================
global :

git config --global user.name 
name : Awnish Kr Sharma

git config --global user.email 
email : awnishmmg.a41@gmail.com

local :-
git config --local user.name 
name : Awnish Kr Sharma

git config --local user.email 
email : awnishmmg.a41@gmail.com

default:-
git config user.name 
name : Awnish Kr Sharma

git config user.email 
email : awnishmmg.a41@gmail.com

owner : system owner
repo owner :  
cmd:/> git log 
	All the people who has access to the repo all called owner or contributer.
	owner 
		1. owner : create,delete,update
		2. maintainer : create,update no delete permission 
		3. developer : push and pull
		4. reporter : report issue, and read.
		
by default branch : master,main
How to download :-
1. git clone : first time download 
	git clone <url>
2. git pull : for every update if you want download 
	git pull 
	
	use case of the git pull :-
	============================
	consider a Team with 
	1. project manager (owner/mainter) 
	2. 2 Developer mr. santa,banta (1 Dev : mainter or 1 dev : developer)
	3. 1 Tester (reporter)
	
	Request -> collaberator request.
	settings -> collaberator -> add or remove.
	
	santa@xyz.com
	banta@xyz.com 
	manager@xyz.com 
	tester@xyz.com 
	
	by-default : role assign : developer.
	Note : push and pull is branch specific.
	by-default : master or main
	
	git branch : All the branches available in the repository 
	
	git branch 
	git branch --all
	
	branches two types 
	1. local branch : white or green
		green - current branch
	2. remote branch : present in server 
		
	Note : master is always stable and you should always create your own branch.
	all the branch other than are called feature branch.
	
	checkout command:-
	====================
	git checkout <branch>
	to switch any branch 
	
	
	How check status:-
	===================
	git status 
	
	How to add the files stage :-
	========================
	git add . => All files stage.
	git add about.html => only About file 
	
	
	git restore --staged <filename1>,<filename2>
	or 
	
	git restore --staged <filename1>
	git restore --staged <filename2>
	
	How to restore file :-
	=======================
	git restore filename1
	
	How to commit :-
	===============
	git commit -m "Your Message"
	
	How to check log :-
	================
	git log 
	
	Note : HEAD -> most recent commit => HEAD Branch 
	
	How to check url of remote server:-
	=====================================
	git remote -v 
	origin <fetch>
	origin <push>
	
	git pull 
	git push origin ashu-dev
	
	Note :- before push always run git pull
	Note :- Always set the user.name and user.email 
	
	How to set user.name 
		git config --global user.name "Awnish Kumar"
	How to set user.email 
		git config --global user.email "awnishmmg@gmail.com"
	
	How to get user.name 
		git config --global user.name
	How to get user.email 
		git config --global user.email
	
React is powered by components:-
==============================
component are re-usable elements. just like functions.
functions we define once and re-use again.
function concept are just, pickel.

React has two types of component
1. class based component : older convention
2. functions based component : latest convention

in class based component we make class based syntax.
function based component we make function based component.

React Hirerarichal Structure :-
Parent 
	child1 
		child2
			child3
			


index.js
	App 
	  A 
	  
in React data will flow from parent to child.
	<App>
	   <A/>
	</App>

   A is nested component App.
   A is child App 
   App is a Parent of A 
   
   
   Self Closing Component 
   <A/>
   Container component
   <A> </A>
	when we have child component 
		children keyword used to access the child.
		

	one way binding:-
	================
	{} => You can evaluate an expression.
	{} => conditions ternary 
    {} => Equations 
	{} => variable resolve or dynamic.
	
	if you want to generate content we can {} bracket in html view. JSX.
	
	Rule :- in React every property of html becomes 
	javascript object.
	convention : javascript
	
	<h1 class="myclass">This is Heading</h1>
	
	Css in React :-
	===============
	1. inline 
	2. external 
	3. Internal is dangerous.
	
	css properties :-
	background-color : blue (kebab-case)
	
	{
	  backgroundColor : "blue"
	}
	
	inline css:-
	=========
	style={{ backgroundColor: "red", color: "blue" }}
	
	external css:-
	==================
	
	
	Rule : JS or Jsx file css will is JS Style 
	Css file : it will in css style
	
	if you class="myclass"
					|
					class component
					class css 
					
	class : keyword reserved 
    className  : camelCase 
	
	Concept of MPA in SPA :-
	=======================
	MPA : multi page application 
	SPA : single page application
	
	Our React is single page application. 
	How we can manage Multiple Pages in SPA.
	
	Do you remeber code base of React using Node and express:-
	==========================================================
	components/pages
		-About.js 
		-Gallery.js 
		-Home.js 
	Does these component behave independent page or not.
	
	what does node and express router do :-
	========================================
	/login 
	  |----------> login.js =====> render 
	/gallery 
	  |-----------> Gallery.js ====> render 
	/contact 
	  |-----------> Contact.js  ====> render
	
	 according to URL we have render our component.
	 we need router for this. 
	 so react provider readymade router 
	 
	 The name of that router is react-router v5
	 by default react-router is not available in react 
	 we install it.
	 
	 step1 :-
	 cmd:/> cd app1
	 cmd:/> type package.json
	 cmd:/> npm install react-router-dom@5
	 
	 steps 2:-
	 =========
	 Set up the router with index.js 
	 integrate BrowserRouter withj index.js 
	 
	 import { BrowserRouter } from "react-router-dom";
	 
	 Replace App with this code  :-
	 
	 <BrowserRouter>
      <App />
     </BrowserRouter>
	 
	 Step3 :- Make your Page components ready.
	 make pages folder 
	 src/components/pages 
		1. Gallery.jsx 
		2. Login.jsx
		3. Home.jsx
		...
		...
		
Important properties of routes:-
===============================
	1. match 
	2. location 
	3. params
	4. history
	
	
	what is difference url and path :-
	path : about/:id  : static
	url : about/1 : dynamic 

How to import images and icons  :-
=====================================
The concept of importing images and icons remains same.

How to integrate the images in react 
these are local Images:-
========================
1. from public folder 
2. from src 

you can directly integrate the cdn links 
cdn link : content network network.
Images if they are hosted cdn server and you get the link to the image you can directly link 
that path.

cdn link : Browser will automatically fetch inside any tags,css or background or img tag.

https://media.istockphoto.com/id/2186871098/photo/marl-lake-sun-pillar-sunrise.jpg?s=1024x1024&w=is&k=20&c=xDMlQQnkRhDAWzED9L9IUnzFueFD5k57NnCAlsidgt0=

Some Open Source Resource for cdn:-
-github.com 
-mediafire 
-imagekit 

cloud server for cdn :-
========================
aws s3 bucket images in cdn 
cloudfront.com 

Important point :-
if you are using cdn links then definetly you can integrate directly from tags from css as well.

How to add images locally.
Note if images or icons are inside src :-
=======================================
it can be imported like json or css files with a reference then use it anywhere.

import linkedIn from "../../assets/icons/icons8-linkedin-100.png";
		|
		reference variable
		
if images are at public folder 
=======================================		
if images or icons are stored inside public folder they will act static files.
and they can directly called using /foldername/filename.extension

eg:-
public
	|index.html
	|icons 
		apple.jpg
		
	
	/icons/apple.jpg
	<img src="/icons/apple.jpg" alt="appple" height={50} width={50}/>


using require("path/to/image")
================================
<img src={require("path/to/image")} alt="appple" height={50} width={50}/>

Hosted url of cdn links:-
https://github.com/awnishmmg/my-cdn-assets

we can implement bootstrap by 3 ways 
========================================
1. using cdn link 
2. using distributed min files boostrap.min.js or min.css locally
3. using React bootstrap framework

-cdn is always fast.
-no compilation required in the webpack.

====== How to interect with forms :===========
Javascript is all about dom manupulations with get and set.

How to Work with Events:-
========================
onClick : Event 
onclick : onClick 
onchange : onChange
onfocus : onFocus 
onblur  : onBlur 
onmouseover : onMouseOver
onmouseleave : onMouseLeave
onhover : onHover
onload : onLoad
...
...

state in react are special variable which when changes automatically renders the UI.
state is always global. 
React getter and setter 
	  getter => variable => state 
	  setter => method => state value set 
	  
	  
React is powerful because hook.
hook is special function which is used add functionality to any component.
================
Types of hooks 
================

pre-defined hook 
=================
Total 18-19 Hooks
1. useState : Hook 
2. useEffect : Hook 
3. useRef : Hook 
4. useId : Hook 
5. useMemo : Hook 
6. useContext : Hook 
 
custom hook or user-defined 
These user-defined made my programmer for there own use case.
when ever you want to work with hooks you need to use, useState 


step 1:-
=========
const [getter,setterMethod] = useState(0)
intial stage : getter => 0 

setterMethod(10)

states are by-default im-mutables they are readonly.
they cannot be set directly.
that is why we need setter
Note :-
==========
React support one way binding we need to enable two way binding.
In each value change we must call setter method

To Observe the change we have an event OnChange
Javascript All event functions have event object object as parameter.


onClick : Event  => event
onclick : onClick  => event
onchange : onChange => event
onfocus : onFocus  => event
onblur  : onBlur  => event
onmouseover : onMouseOver => event
onmouseleave : onMouseLeave => event
onhover : onHover => event
onload : onLoad => event

event object logs every activity perform target.
event object is binding some functions  and each function is binded to, element.

Jis element mey event perform => event Object target => what ever value is change it will 
returned as a result.

How to prevent Page from submitted/Refresh:-
=====================================
1. convert input type submit -> input button 
   <button type="button"> Submit </button>
   
2. form Tag => onSubmit={() => {
            return false;
          }}
	 
		onSubmit={() => {
            return false;
          }}

3. event.preventDefault()












 
 
































		
		
		
		
		










		
		
		
		
		
		
		
		
	 
	 
	 
	 
	 
	 
	 
	 
	 
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
   
   







































	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	 
	 
	 
	
	
	   
	   
	   
	   
	   
		
		
		
		
		
		
		
	
		

		
	
	
	
	
	
	
	
	
	
		

	
	
	
	
	
	
	
	
	